// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String                @id @default(auto()) @map("_id") @db.ObjectId
  email        String                @unique
  password     String
  nickname     String
  servers      Server[]
  channels     Channel[]
  chats        Chat[]
  participate  Participate[]
  chatRooms    ChatRoomParticipant[]
  chatRoomChat ChatRoomChat[]
  auth         Auth?
  createdAt    DateTime
  updatedAt    DateTime?
  deletedAt    DateTime?
}

model Participate {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  server    Server   @relation(fields: [serverId], references: [id])
  serverId  String   @db.ObjectId
  createdAt DateTime
}

model Server {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  type        String
  owner       User          @relation(fields: [ownerId], references: [id])
  ownerId     String        @db.ObjectId
  channels    Channel[]
  chats       Chat[]
  participate Participate[]
  createdAt   DateTime
  updatedAt   DateTime?
  deletedAt   DateTime?
}

model Channel {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  type      String
  owner     User      @relation(fields: [ownerId], references: [id])
  ownerId   String    @db.ObjectId
  server    Server    @relation(fields: [serverId], references: [id])
  serverId  String    @db.ObjectId
  chats     Chat[]
  createdAt DateTime
  updatedAt DateTime?
  deletedAt DateTime?
}

model Chat {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  sender    User      @relation(fields: [senderId], references: [id])
  senderId  String    @db.ObjectId
  server    Server    @relation(fields: [serverId], references: [id])
  serverId  String    @db.ObjectId
  channel   Channel   @relation(fields: [channelId], references: [id])
  channelId String    @db.ObjectId
  createdAt DateTime
  updatedAt DateTime?
  deletedAt DateTime?
}

model Auth {
  id           String @id @default(uuid()) @map("_id")
  user         User   @relation(fields: [userId], references: [id])
  userId       String @unique @db.ObjectId
  accessToken  String
  refreshToken String
}

model ChatRoom {
  id               String                @id @default(auto()) @map("_id") @db.ObjectId
  participants     ChatRoomParticipant[]
  userNicknameList String[]
  chatRoomChats    ChatRoomChat[]
}

model ChatRoomParticipant {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId

  @@index([userId, chatRoomId])
}

model ChatRoomChat {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  sender     User      @relation(fields: [senderId], references: [id])
  senderId   String    @db.ObjectId
  chatRoom   ChatRoom  @relation(fields: [chatRoomId], references: [id])
  chatRoomId String    @db.ObjectId
  createdAt  DateTime
  updatedAt  DateTime?
  deletedAt  DateTime?
}
